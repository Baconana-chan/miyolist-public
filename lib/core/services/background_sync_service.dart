import 'dart:async';
import 'package:workmanager/workmanager.dart';
import 'package:hive_flutter/hive_flutter.dart';
import '../models/media_details.dart';
import '../models/push_notification_settings.dart';
import 'push_notification_service.dart';
import 'anilist_service.dart';
import 'airing_schedule_service.dart';
import 'auth_service.dart';
import 'local_storage_service.dart';

/// Callback –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å top-level —Ñ—É–Ω–∫—Ü–∏–µ–π)
@pragma('vm:entry-point')
void callbackDispatcher() {
  Workmanager().executeTask((task, inputData) async {
    print('üîÑ Background task started: $task');

    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Hive –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
      await Hive.initFlutter();

      // –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö —ç–ø–∏–∑–æ–¥–æ–≤
      await BackgroundSyncService().checkForNewEpisodes();

      print('‚úÖ Background task completed: $task');
      return Future.value(true);
    } catch (e) {
      print('‚ùå Background task error: $e');
      return Future.value(false);
    }
  });
}

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —ç–ø–∏–∑–æ–¥–æ–≤
class BackgroundSyncService {
  static final BackgroundSyncService _instance =
      BackgroundSyncService._internal();
  factory BackgroundSyncService() => _instance;
  BackgroundSyncService._internal();

  static const String _taskName = 'episodeCheckTask';
  static const String _lastCheckKey = 'last_episode_check';

  bool _initialized = false;
  late Box _settingsBox;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ–Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
  Future<void> initialize() async {
    if (_initialized) return;

    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Workmanager
      await Workmanager().initialize(
        callbackDispatcher,
        isInDebugMode: false, // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤ true –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      );

      _settingsBox = await Hive.openBox('background_sync_settings');
      _initialized = true;

      print('‚úÖ Background sync service initialized');
    } catch (e) {
      print('‚ùå Error initializing background sync service: $e');
    }
  }

  /// –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
  Future<void> startPeriodicChecks({int intervalMinutes = 30}) async {
    if (!_initialized) await initialize();

    try {
      // –û—Ç–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏
      await Workmanager().cancelByUniqueName(_taskName);

      // –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É
      await Workmanager().registerPeriodicTask(
        _taskName,
        _taskName,
        frequency: Duration(minutes: intervalMinutes),
        constraints: Constraints(
          networkType: NetworkType.connected,
        ),
        existingWorkPolicy: ExistingWorkPolicy.replace,
      );

      print('‚úÖ Periodic episode checks started (every $intervalMinutes minutes)');
    } catch (e) {
      print('‚ùå Error starting periodic checks: $e');
    }
  }

  /// –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
  Future<void> stopPeriodicChecks() async {
    try {
      await Workmanager().cancelByUniqueName(_taskName);
      print('‚èπÔ∏è Periodic episode checks stopped');
    } catch (e) {
      print('‚ùå Error stopping periodic checks: $e');
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ —ç–ø–∏–∑–æ–¥—ã (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞)
  Future<void> checkForNewEpisodes() async {
    try {
      final pushNotificationService = PushNotificationService();
      await pushNotificationService.initialize();

      final settings = pushNotificationService.getSettings();
      if (!settings.enabled || !settings.episodeNotificationsEnabled) {
        print('üì≠ Episode notifications are disabled');
        return;
      }

      // –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
      final lastCheck = getLastCheckTime();
      final now = DateTime.now();

      print('üîç Checking for new episodes since $lastCheck');

      // üîî –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π AiringScheduleService –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
      try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        final authService = AuthService();
        final localStorageService = LocalStorageService();
        
        // –°–æ–∑–¥–∞–µ–º AiringScheduleService
        final airingService = AiringScheduleService(authService, localStorageService);
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–ø–∏–∑–æ–¥—ã –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è (—Å–µ–≥–æ–¥–Ω—è + –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ)
        final todayEpisodes = await airingService.getTodayEpisodes();
        final upcomingEpisodes = await airingService.getUpcomingEpisodes(count: 50);
        final allEpisodes = [...todayEpisodes, ...upcomingEpisodes];
        
        print('üìÖ Found ${allEpisodes.length} episodes in calendar');
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        await pushNotificationService.syncWithAiringSchedule(allEpisodes);
        
        print('‚úÖ Successfully synced ${allEpisodes.length} episodes with notifications');
      } catch (e) {
        print('‚ö†Ô∏è Error fetching airing schedule: $e');
      }
      
      // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      await saveLastCheckTime(now);

      print('‚úÖ Episode check completed');
    } catch (e) {
      print('‚ùå Error checking for new episodes: $e');
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–¥–∏–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–Ω–∏–º–µ
  Future<void> checkAnimeForNewEpisodes({
    required int animeId,
    required String animeTitle,
    required int lastWatchedEpisode,
    required DateTime airingAt,
  }) async {
    try {
      final pushNotificationService = PushNotificationService();
      final settings = pushNotificationService.getSettings();

      final animeSettings = settings.getAnimeSettings(animeId);
      if (!animeSettings.enabled) return;

      // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –∑–∞–¥–µ—Ä–∂–∫–∏
      final timing = animeSettings.customTiming ?? settings.episodeTiming;
      final notificationTime = airingAt.add(timing.delay);

      // –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ä–∞–∑—É
      if (notificationTime.isBefore(DateTime.now())) {
        await pushNotificationService.showEpisodeNotification(
          animeId: animeId,
          animeTitle: animeTitle,
          episode: lastWatchedEpisode + 1,
        );
      } else {
        // –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await pushNotificationService.scheduleNotification(
          id: animeId + (lastWatchedEpisode + 1) * 100000,
          title: 'üì∫ New Episode Released!',
          message: 'Episode ${lastWatchedEpisode + 1} of $animeTitle is now available',
          scheduledDate: notificationTime,
          payload: 'anime:$animeId',
        );
      }
    } catch (e) {
      print('‚ùå Error checking anime $animeId: $e');
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
  DateTime? getLastCheckTime() {
    final timestamp = _settingsBox.get(_lastCheckKey) as int?;
    if (timestamp == null) return null;
    return DateTime.fromMillisecondsSinceEpoch(timestamp);
  }

  /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
  Future<void> saveLastCheckTime(DateTime time) async {
    await _settingsBox.put(_lastCheckKey, time.millisecondsSinceEpoch);
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
  Map<String, dynamic> getStats() {
    final lastCheck = getLastCheckTime();
    return {
      'lastCheck': lastCheck?.toIso8601String(),
      'timeSinceLastCheck': lastCheck != null
          ? DateTime.now().difference(lastCheck).inMinutes
          : null,
      'isEnabled': _initialized,
    };
  }

  /// –ó–∞–∫—Ä—ã—Ç—å —Å–µ—Ä–≤–∏—Å
  Future<void> dispose() async {
    await stopPeriodicChecks();
    await _settingsBox.close();
    _initialized = false;
  }
}
