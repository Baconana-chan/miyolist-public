import '../models/media_details.dart';
import 'local_storage_service.dart';
import 'supabase_service.dart';
import 'anilist_service.dart';

class MediaSearchService {
  final LocalStorageService _localStorage;
  final SupabaseService _supabase;
  final AniListService _anilist;

  MediaSearchService({
    required LocalStorageService localStorage,
    required SupabaseService supabase,
    required AniListService anilist,
  })  : _localStorage = localStorage,
        _supabase = supabase,
        _anilist = anilist;

  /// –ü–æ–∏—Å–∫ –º–µ–¥–∏–∞ —Å —Ç—Ä—ë—Ö—É—Ä–æ–≤–Ω–µ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π:
  /// 1. –°–Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫–µ—à–µ (Hive)
  /// 2. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –ø–æ–∏—Å–∫ –≤ Supabase
  /// 3. –ï—Å–ª–∏ –∏ —Ç–∞–º –Ω–µ—Ç - –∑–∞–ø—Ä–æ—Å –∫ AniList –∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  Future<List<MediaDetails>> searchMedia({
    required String query,
    String? type, // 'ANIME', 'MANGA', –∏–ª–∏ null –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤
  }) async {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
    final localResults = await _searchInLocalCache(query, type);
    if (localResults.isNotEmpty) {
      print('üîç Found ${localResults.length} results in local cache');
      return localResults;
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º Supabase
    try {
      final supabaseResults = await _searchInSupabase(query, type);
      if (supabaseResults.isNotEmpty) {
        print('üîç Found ${supabaseResults.length} results in Supabase');
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
        for (final media in supabaseResults) {
          await _localStorage.saveMediaDetails(media);
        }
        return supabaseResults;
      }
    } catch (e) {
      print('‚ö†Ô∏è Supabase search error: $e');
    }

    // 3. –ó–∞–ø—Ä–æ—Å –∫ AniList
    print('üîç Searching in AniList API...');
    final anilistResults = await _searchInAniList(query, type);
    
    // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for (final media in anilistResults) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
      await _localStorage.saveMediaDetails(media);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Supabase (–≤ —Ñ–æ–Ω–µ, –Ω–µ –∂–¥—ë–º)
      _supabase.cacheMediaDetails(media).catchError((e) {
        print('‚ö†Ô∏è Failed to cache in Supabase: $e');
      });
    }

    return anilistResults;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ–¥–∏–∞
  Future<MediaDetails?> getMediaDetails(int mediaId) async {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
    final cached = await _localStorage.getMediaDetails(mediaId);
    if (cached != null && !cached.isCacheExpired()) {
      print('üì¶ Using cached media details (id: $mediaId)');
      return cached;
    }

    // 2. –ó–∞–ø—Ä–æ—Å –∫ AniList
    print('üåê Fetching media details from AniList (id: $mediaId)');
    final media = await _anilist.getMediaDetails(mediaId);
    
    if (media != null) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
      await _localStorage.saveMediaDetails(media);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Supabase (–≤ —Ñ–æ–Ω–µ)
      _supabase.cacheMediaDetails(media).catchError((e) {
        print('‚ö†Ô∏è Failed to cache in Supabase: $e');
      });
    }

    return media;
  }

  Future<List<MediaDetails>> _searchInLocalCache(String query, String? type) async {
    final allMedia = await _localStorage.getAllCachedMedia();
    final lowerQuery = query.toLowerCase();
    
    return allMedia.where((media) {
      // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
      if (type != null && media.type != type) {
        return false;
      }

      // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º –∏ —Å–∏–Ω–æ–Ω–∏–º–∞–º
      final matchesRomaji = media.titleRomaji?.toLowerCase().contains(lowerQuery) ?? false;
      final matchesEnglish = media.titleEnglish?.toLowerCase().contains(lowerQuery) ?? false;
      final matchesNative = media.titleNative?.toLowerCase().contains(lowerQuery) ?? false;
      final matchesSynonyms = media.synonyms?.any(
        (s) => s.toLowerCase().contains(lowerQuery),
      ) ?? false;

      return matchesRomaji || matchesEnglish || matchesNative || matchesSynonyms;
    }).toList();
  }

  Future<List<MediaDetails>> _searchInSupabase(String query, String? type) async {
    return await _supabase.searchMedia(query, type);
  }

  Future<List<MediaDetails>> _searchInAniList(String query, String? type) async {
    return await _anilist.searchMedia(query, type);
  }
}
